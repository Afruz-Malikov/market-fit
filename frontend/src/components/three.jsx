import React, { useRef, useEffect } from 'react';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ glb (GLTF) –º–æ–¥–µ–ª–∏

const Three = ({ modelUrl, width = 600, height = 400 }) => {
  const mountRef = useRef(null);

  useEffect(() => {
    let THREE;
    let renderer, scene, camera, controls, model;
    let animationId;

    const init = async () => {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º three.js –∏ OrbitControls
      THREE = await import('three');
      const { OrbitControls } = await import(
        'three/examples/jsm/controls/OrbitControls'
      );
      // –°—Ü–µ–Ω–∞
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0xf0f0f0);

      // –ö–∞–º–µ—Ä–∞
      camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
      camera.position.set(0, 2, 2.5);

      // –†–µ–Ω–¥–µ—Ä–µ—Ä
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(width, height);
      renderer.shadowMap.enabled = true; // ‚úÖ –≤–∫–ª—é—á–∞–µ–º —Ç–µ–Ω–∏
      renderer.shadowMap.type = THREE.PCFSoftShadowMap; // –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏
      mountRef.current.appendChild(renderer.domElement);

      // –°–≤–µ—Ç
      const ambientLight = new THREE.AmbientLight(0xffffff, 1);
      scene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 1, 5);
      directionalLight.position.set(5, 10, 5);
      directionalLight.castShadow = true; // ‚úÖ —Å–≤–µ—Ç –¥–∞—ë—Ç —Ç–µ–Ω–∏
      directionalLight.shadow.mapSize.width = 2048;
      directionalLight.shadow.mapSize.height = 2048;
      directionalLight.shadow.camera.near = 1;
      directionalLight.shadow.camera.far = 50;
      scene.add(directionalLight);

      // ‚úÖ –¢–µ–∫—Å—Ç—É—Ä—ã
      const textureLoader = new THREE.TextureLoader();
      const floorTexture = textureLoader.load('/parket.jpg');
      floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping;
      floorTexture.repeat.set(2, 2);

      const wallTexture = textureLoader.load('/wall.jpg');

      // ‚úÖ –ü–æ–ª
      const floor = new THREE.Mesh(
        new THREE.BoxGeometry(10, 1, 10),
        new THREE.MeshStandardMaterial({ map: floorTexture })
      );
      floor.position.y = -0.5;
      floor.receiveShadow = true; // ‚úÖ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–Ω–∏

      // ‚úÖ –°—Ç–µ–Ω—ã
      const wallMaterial = new THREE.MeshStandardMaterial({ map: wallTexture });

      const wallRight = new THREE.Mesh(
        new THREE.BoxGeometry(1, 10, 10),
        wallMaterial
      );
      wallRight.position.set(5, 0, 0);
      wallRight.receiveShadow = true;

      const wallLeft = new THREE.Mesh(
        new THREE.BoxGeometry(1, 10, 10),
        wallMaterial
      );
      wallLeft.position.set(-5, 0, 0);
      wallLeft.receiveShadow = true;

      const wallBack = new THREE.Mesh(
        new THREE.BoxGeometry(10, 10, 1),
        wallMaterial
      );
      wallBack.position.set(0, 0, -5);
      wallBack.receiveShadow = true;

      const wallFront = new THREE.Mesh(
        new THREE.BoxGeometry(10, 10, 1),
        wallMaterial
      );
      wallFront.position.set(0, 0, 5);
      wallFront.receiveShadow = true;

      // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—ë
      scene.add(floor, wallRight, wallLeft, wallBack, wallFront);

      // === –ü–ª–∏–Ω—Ç—É—Å ===
      const plinthMaterial = new THREE.MeshStandardMaterial({
        color: 0xdddddd,
      }); // —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π

      // –ø–ª–∏–Ω—Ç—É—Å —É –ø—Ä–∞–≤–æ–π —Å—Ç–µ–Ω—ã
      const plinthRight = new THREE.Mesh(
        new THREE.BoxGeometry(1, 0.2, 10), // —Ç–æ–ª—â–∏–Ω–∞ Y = 0.2
        plinthMaterial
      );
      plinthRight.position.set(4.9, 0.05, 0); // —á—É—Ç—å –Ω–∏–∂–µ –ø–æ–ª–∞
      plinthRight.castShadow = true;
      plinthRight.receiveShadow = true;

      // –ø–ª–∏–Ω—Ç—É—Å —É –ª–µ–≤–æ–π —Å—Ç–µ–Ω—ã
      const plinthLeft = new THREE.Mesh(
        new THREE.BoxGeometry(1, 0.2, 10),
        plinthMaterial
      );
      plinthLeft.position.set(-4.9, 0.05, 0);
      plinthLeft.castShadow = true;
      plinthLeft.receiveShadow = true;

      // –ø–ª–∏–Ω—Ç—É—Å —É –∑–∞–¥–Ω–µ–π —Å—Ç–µ–Ω—ã
      const plinthBack = new THREE.Mesh(
        new THREE.BoxGeometry(10, 0.2, 1),
        plinthMaterial
      );
      plinthBack.position.set(0, 0.05, -4.9);
      plinthBack.castShadow = true;
      plinthBack.receiveShadow = true;

      // –ø–ª–∏–Ω—Ç—É—Å —É –ø–µ—Ä–µ–¥–Ω–µ–π —Å—Ç–µ–Ω—ã
      const plinthFront = new THREE.Mesh(
        new THREE.BoxGeometry(10, 0.2, 1),
        plinthMaterial
      );
      plinthFront.position.set(0, 0.05, 4.9);
      plinthFront.castShadow = true;
      plinthFront.receiveShadow = true;

      scene.add(plinthRight, plinthLeft, plinthBack, plinthFront);

      // –ö–æ–Ω—Ç—Ä–æ–ª—ã
      controls = new OrbitControls(camera, renderer.domElement);
      controls.rollSpeed = 0.01;
      controls.enablePan = false;

      controls.autoRotate = true;
      controls.autoRotateSpeed = 1;
      controls.minDistance = 0.1;
      controls.maxDistance = 5;
      controls.minPolarAngle = Math.PI / 3;
      controls.maxPolarAngle = Math.PI / 3;
      controls.target.set(0, 1, 0);

      // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ glb –º–æ–¥–µ–ª–∏
      if (modelUrl) {
        const { GLTFLoader } = await import(
          'three/examples/jsm/loaders/GLTFLoader'
        );
        const loader = new GLTFLoader();
        loader.load(
          modelUrl,
          (gltf) => {
            model = gltf.scene;
            scene.add(model);
          },
          undefined,
          (error) => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GLB –º–æ–¥–µ–ª–∏:', error);
          }
        );
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–¥–µ–ª–∏, –¥–æ–±–∞–≤–∏–º –∫—É–± –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        const geometry = new THREE.BoxGeometry();
        const material = new THREE.MeshStandardMaterial({ color: 0x0077ff });
        model = new THREE.Mesh(geometry, material);
        scene.add(model);
      }
      const { GLTFLoader } = await import('three/examples/jsm/loaders/GLTFLoader');
      const wardrobeLoader = new GLTFLoader();
      wardrobeLoader.load(
        '../../3dmodels/wardrobe.glb', // –ø—É—Ç—å –∫ —à–∫–∞—Ñ—É
        (gltf) => {
          const wardrobe = gltf.scene;
          wardrobe.traverse((child) => {
            if (child.isMesh) {
              child.castShadow = true;
              child.receiveShadow = true;
            }
          });

          // üìå –°—Ç–∞–≤–∏–º —à–∫–∞—Ñ –≤ —É–≥–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–µ–≤—ã–π-–∑–∞–¥–Ω–∏–π —É–≥–æ–ª –∫–æ–º–Ω–∞—Ç—ã)
          wardrobe.position.set(-3.5, 0, -4);
          wardrobe.scale.set(1, 1, 1); // –º–æ–∂–Ω–æ –ø–æ–¥–æ–≥–Ω–∞—Ç—å –º–∞—Å—à—Ç–∞–± –ø–æ–¥ –∫–æ–º–Ω–∞—Ç—É

          scene.add(wardrobe);
        },
        undefined,
        (error) => {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∫–∞—Ñ–∞ wardrobe.glb:', error);
        }
      );
      // –ê–Ω–∏–º–∞—Ü–∏—è
      const animate = () => {
        animationId = requestAnimationFrame(animate);

        controls.update();
        renderer.render(scene, camera);
      };
      animate();
    };

    init();

    return () => {
      // –û—á–∏—Å—Ç–∫–∞
      if (animationId) cancelAnimationFrame(animationId);
      if (renderer) {
        renderer.dispose();
        if (renderer.domElement && mountRef.current) {
          mountRef.current.removeChild(renderer.domElement);
        }
      }
      scene = null;
      camera = null;
      controls = null;
      model = null;
    };
  }, [modelUrl, width, height]);

  return (
    <div
      ref={mountRef}
      style={{
        width: width + 'px',
        height: height + 'px',
        border: '1px solid #ccc',
        borderRadius: '8px',
        overflow: 'hidden',
        background: '#f0f0f0',
      }}
    />
  );
};

export default Three;
